package com.mdove.passwordguard.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mdove.passwordguard.greendao.entity.OuterAscribe;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OUTER_ASCRIBE".
*/
public class OuterAscribeDao extends AbstractDao<OuterAscribe, Long> {

    public static final String TABLENAME = "OUTER_ASCRIBE";

    /**
     * Properties of entity OuterAscribe.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MContent = new Property(1, String.class, "mContent", false, "M_CONTENT");
        public final static Property MTime = new Property(2, Long.class, "mTime", false, "M_TIME");
        public final static Property MBelongTitleId = new Property(3, Long.class, "mBelongTitleId", false, "M_BELONG_TITLE_ID");
    }


    public OuterAscribeDao(DaoConfig config) {
        super(config);
    }
    
    public OuterAscribeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OUTER_ASCRIBE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"M_CONTENT\" TEXT," + // 1: mContent
                "\"M_TIME\" INTEGER," + // 2: mTime
                "\"M_BELONG_TITLE_ID\" INTEGER);"); // 3: mBelongTitleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OUTER_ASCRIBE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OuterAscribe entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mContent = entity.getMContent();
        if (mContent != null) {
            stmt.bindString(2, mContent);
        }
 
        Long mTime = entity.getMTime();
        if (mTime != null) {
            stmt.bindLong(3, mTime);
        }
 
        Long mBelongTitleId = entity.getMBelongTitleId();
        if (mBelongTitleId != null) {
            stmt.bindLong(4, mBelongTitleId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OuterAscribe entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mContent = entity.getMContent();
        if (mContent != null) {
            stmt.bindString(2, mContent);
        }
 
        Long mTime = entity.getMTime();
        if (mTime != null) {
            stmt.bindLong(3, mTime);
        }
 
        Long mBelongTitleId = entity.getMBelongTitleId();
        if (mBelongTitleId != null) {
            stmt.bindLong(4, mBelongTitleId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OuterAscribe readEntity(Cursor cursor, int offset) {
        OuterAscribe entity = new OuterAscribe( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mContent
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // mTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // mBelongTitleId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OuterAscribe entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMBelongTitleId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OuterAscribe entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OuterAscribe entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OuterAscribe entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
