package com.mdove.passwordguard.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mdove.passwordguard.greendao.entity.SecondTodayPlan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SECOND_TODAY_PLAN".
*/
public class SecondTodayPlanDao extends AbstractDao<SecondTodayPlan, Long> {

    public static final String TABLENAME = "SECOND_TODAY_PLAN";

    /**
     * Properties of entity SecondTodayPlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MTodayPlan = new Property(1, String.class, "mTodayPlan", false, "M_TODAY_PLAN");
        public final static Property MTime = new Property(2, long.class, "mTime", false, "M_TIME");
        public final static Property MIsSuc = new Property(3, int.class, "mIsSuc", false, "M_IS_SUC");
        public final static Property MIsSee = new Property(4, int.class, "mIsSee", false, "M_IS_SEE");
        public final static Property MUrgent = new Property(5, int.class, "mUrgent", false, "M_URGENT");
        public final static Property MImportant = new Property(6, int.class, "mImportant", false, "M_IMPORTANT");
        public final static Property StartHour = new Property(7, int.class, "startHour", false, "START_HOUR");
        public final static Property StartMin = new Property(8, int.class, "startMin", false, "START_MIN");
        public final static Property EndHour = new Property(9, int.class, "endHour", false, "END_HOUR");
        public final static Property EndMin = new Property(10, int.class, "endMin", false, "END_MIN");
        public final static Property SucStartHour = new Property(11, int.class, "sucStartHour", false, "SUC_START_HOUR");
        public final static Property SucStartMin = new Property(12, int.class, "sucStartMin", false, "SUC_START_MIN");
        public final static Property SucEndHour = new Property(13, int.class, "sucEndHour", false, "SUC_END_HOUR");
        public final static Property SucEndMin = new Property(14, int.class, "sucEndMin", false, "SUC_END_MIN");
        public final static Property MLabelId = new Property(15, long.class, "mLabelId", false, "M_LABEL_ID");
        public final static Property MMainTodayPlanId = new Property(16, long.class, "mMainTodayPlanId", false, "M_MAIN_TODAY_PLAN_ID");
        public final static Property MLabel = new Property(17, String.class, "mLabel", false, "M_LABEL");
        public final static Property MTips = new Property(18, String.class, "mTips", false, "M_TIPS");
    }


    public SecondTodayPlanDao(DaoConfig config) {
        super(config);
    }
    
    public SecondTodayPlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SECOND_TODAY_PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"M_TODAY_PLAN\" TEXT," + // 1: mTodayPlan
                "\"M_TIME\" INTEGER NOT NULL ," + // 2: mTime
                "\"M_IS_SUC\" INTEGER NOT NULL ," + // 3: mIsSuc
                "\"M_IS_SEE\" INTEGER NOT NULL ," + // 4: mIsSee
                "\"M_URGENT\" INTEGER NOT NULL ," + // 5: mUrgent
                "\"M_IMPORTANT\" INTEGER NOT NULL ," + // 6: mImportant
                "\"START_HOUR\" INTEGER NOT NULL ," + // 7: startHour
                "\"START_MIN\" INTEGER NOT NULL ," + // 8: startMin
                "\"END_HOUR\" INTEGER NOT NULL ," + // 9: endHour
                "\"END_MIN\" INTEGER NOT NULL ," + // 10: endMin
                "\"SUC_START_HOUR\" INTEGER NOT NULL ," + // 11: sucStartHour
                "\"SUC_START_MIN\" INTEGER NOT NULL ," + // 12: sucStartMin
                "\"SUC_END_HOUR\" INTEGER NOT NULL ," + // 13: sucEndHour
                "\"SUC_END_MIN\" INTEGER NOT NULL ," + // 14: sucEndMin
                "\"M_LABEL_ID\" INTEGER NOT NULL ," + // 15: mLabelId
                "\"M_MAIN_TODAY_PLAN_ID\" INTEGER NOT NULL ," + // 16: mMainTodayPlanId
                "\"M_LABEL\" TEXT," + // 17: mLabel
                "\"M_TIPS\" TEXT);"); // 18: mTips
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SECOND_TODAY_PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SecondTodayPlan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mTodayPlan = entity.getMTodayPlan();
        if (mTodayPlan != null) {
            stmt.bindString(2, mTodayPlan);
        }
        stmt.bindLong(3, entity.getMTime());
        stmt.bindLong(4, entity.getMIsSuc());
        stmt.bindLong(5, entity.getMIsSee());
        stmt.bindLong(6, entity.getMUrgent());
        stmt.bindLong(7, entity.getMImportant());
        stmt.bindLong(8, entity.getStartHour());
        stmt.bindLong(9, entity.getStartMin());
        stmt.bindLong(10, entity.getEndHour());
        stmt.bindLong(11, entity.getEndMin());
        stmt.bindLong(12, entity.getSucStartHour());
        stmt.bindLong(13, entity.getSucStartMin());
        stmt.bindLong(14, entity.getSucEndHour());
        stmt.bindLong(15, entity.getSucEndMin());
        stmt.bindLong(16, entity.getMLabelId());
        stmt.bindLong(17, entity.getMMainTodayPlanId());
 
        String mLabel = entity.getMLabel();
        if (mLabel != null) {
            stmt.bindString(18, mLabel);
        }
 
        String mTips = entity.getMTips();
        if (mTips != null) {
            stmt.bindString(19, mTips);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SecondTodayPlan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mTodayPlan = entity.getMTodayPlan();
        if (mTodayPlan != null) {
            stmt.bindString(2, mTodayPlan);
        }
        stmt.bindLong(3, entity.getMTime());
        stmt.bindLong(4, entity.getMIsSuc());
        stmt.bindLong(5, entity.getMIsSee());
        stmt.bindLong(6, entity.getMUrgent());
        stmt.bindLong(7, entity.getMImportant());
        stmt.bindLong(8, entity.getStartHour());
        stmt.bindLong(9, entity.getStartMin());
        stmt.bindLong(10, entity.getEndHour());
        stmt.bindLong(11, entity.getEndMin());
        stmt.bindLong(12, entity.getSucStartHour());
        stmt.bindLong(13, entity.getSucStartMin());
        stmt.bindLong(14, entity.getSucEndHour());
        stmt.bindLong(15, entity.getSucEndMin());
        stmt.bindLong(16, entity.getMLabelId());
        stmt.bindLong(17, entity.getMMainTodayPlanId());
 
        String mLabel = entity.getMLabel();
        if (mLabel != null) {
            stmt.bindString(18, mLabel);
        }
 
        String mTips = entity.getMTips();
        if (mTips != null) {
            stmt.bindString(19, mTips);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SecondTodayPlan readEntity(Cursor cursor, int offset) {
        SecondTodayPlan entity = new SecondTodayPlan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mTodayPlan
            cursor.getLong(offset + 2), // mTime
            cursor.getInt(offset + 3), // mIsSuc
            cursor.getInt(offset + 4), // mIsSee
            cursor.getInt(offset + 5), // mUrgent
            cursor.getInt(offset + 6), // mImportant
            cursor.getInt(offset + 7), // startHour
            cursor.getInt(offset + 8), // startMin
            cursor.getInt(offset + 9), // endHour
            cursor.getInt(offset + 10), // endMin
            cursor.getInt(offset + 11), // sucStartHour
            cursor.getInt(offset + 12), // sucStartMin
            cursor.getInt(offset + 13), // sucEndHour
            cursor.getInt(offset + 14), // sucEndMin
            cursor.getLong(offset + 15), // mLabelId
            cursor.getLong(offset + 16), // mMainTodayPlanId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // mLabel
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // mTips
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SecondTodayPlan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMTodayPlan(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMTime(cursor.getLong(offset + 2));
        entity.setMIsSuc(cursor.getInt(offset + 3));
        entity.setMIsSee(cursor.getInt(offset + 4));
        entity.setMUrgent(cursor.getInt(offset + 5));
        entity.setMImportant(cursor.getInt(offset + 6));
        entity.setStartHour(cursor.getInt(offset + 7));
        entity.setStartMin(cursor.getInt(offset + 8));
        entity.setEndHour(cursor.getInt(offset + 9));
        entity.setEndMin(cursor.getInt(offset + 10));
        entity.setSucStartHour(cursor.getInt(offset + 11));
        entity.setSucStartMin(cursor.getInt(offset + 12));
        entity.setSucEndHour(cursor.getInt(offset + 13));
        entity.setSucEndMin(cursor.getInt(offset + 14));
        entity.setMLabelId(cursor.getLong(offset + 15));
        entity.setMMainTodayPlanId(cursor.getLong(offset + 16));
        entity.setMLabel(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMTips(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SecondTodayPlan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SecondTodayPlan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SecondTodayPlan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
