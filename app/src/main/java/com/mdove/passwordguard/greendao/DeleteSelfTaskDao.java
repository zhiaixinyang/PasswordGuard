package com.mdove.passwordguard.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mdove.passwordguard.greendao.entity.DeleteSelfTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DELETE_SELF_TASK".
*/
public class DeleteSelfTaskDao extends AbstractDao<DeleteSelfTask, Long> {

    public static final String TABLENAME = "DELETE_SELF_TASK";

    /**
     * Properties of entity DeleteSelfTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MTask = new Property(1, String.class, "mTask", false, "M_TASK");
        public final static Property MCreateTime = new Property(2, long.class, "mCreateTime", false, "M_CREATE_TIME");
        public final static Property MDeleteTime = new Property(3, long.class, "mDeleteTime", false, "M_DELETE_TIME");
        public final static Property MIsSuc = new Property(4, int.class, "mIsSuc", false, "M_IS_SUC");
        public final static Property MIsSee = new Property(5, int.class, "mIsSee", false, "M_IS_SEE");
        public final static Property MPriority = new Property(6, int.class, "mPriority", false, "M_PRIORITY");
    }


    public DeleteSelfTaskDao(DaoConfig config) {
        super(config);
    }
    
    public DeleteSelfTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DELETE_SELF_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"M_TASK\" TEXT," + // 1: mTask
                "\"M_CREATE_TIME\" INTEGER NOT NULL ," + // 2: mCreateTime
                "\"M_DELETE_TIME\" INTEGER NOT NULL ," + // 3: mDeleteTime
                "\"M_IS_SUC\" INTEGER NOT NULL ," + // 4: mIsSuc
                "\"M_IS_SEE\" INTEGER NOT NULL ," + // 5: mIsSee
                "\"M_PRIORITY\" INTEGER NOT NULL );"); // 6: mPriority
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DELETE_SELF_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeleteSelfTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mTask = entity.getMTask();
        if (mTask != null) {
            stmt.bindString(2, mTask);
        }
        stmt.bindLong(3, entity.getMCreateTime());
        stmt.bindLong(4, entity.getMDeleteTime());
        stmt.bindLong(5, entity.getMIsSuc());
        stmt.bindLong(6, entity.getMIsSee());
        stmt.bindLong(7, entity.getMPriority());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeleteSelfTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mTask = entity.getMTask();
        if (mTask != null) {
            stmt.bindString(2, mTask);
        }
        stmt.bindLong(3, entity.getMCreateTime());
        stmt.bindLong(4, entity.getMDeleteTime());
        stmt.bindLong(5, entity.getMIsSuc());
        stmt.bindLong(6, entity.getMIsSee());
        stmt.bindLong(7, entity.getMPriority());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeleteSelfTask readEntity(Cursor cursor, int offset) {
        DeleteSelfTask entity = new DeleteSelfTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mTask
            cursor.getLong(offset + 2), // mCreateTime
            cursor.getLong(offset + 3), // mDeleteTime
            cursor.getInt(offset + 4), // mIsSuc
            cursor.getInt(offset + 5), // mIsSee
            cursor.getInt(offset + 6) // mPriority
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeleteSelfTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMTask(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMCreateTime(cursor.getLong(offset + 2));
        entity.setMDeleteTime(cursor.getLong(offset + 3));
        entity.setMIsSuc(cursor.getInt(offset + 4));
        entity.setMIsSee(cursor.getInt(offset + 5));
        entity.setMPriority(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeleteSelfTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeleteSelfTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeleteSelfTask entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
